O Resumo do Plano
Nossa missão é evoluir seu site, que hoje é uma "vitrine" estática, para uma plataforma de pedidos online completa e inteligente.

Faremos isso criando uma arquitetura híbrida:

A parte pública (cardápio) continuará rápida e otimizada, sendo gerenciada de forma simples pelo dono da pizzaria através do Decap CMS.

A parte interativa (login, pedidos, etc.) será uma aplicação dinâmica, segura e em tempo real, alimentada pelo Firebase.

Assim, teremos o melhor dos dois mundos: a velocidade de um site estático com o poder de uma aplicação web completa.

As Ferramentas e Seus Papéis
Netlify/GitHub: Sua base para hospedagem e deploy contínuo.

Decap CMS: O painel administrativo para o dono da pizzaria gerenciar o cardápio.

Firebase: O "cérebro" da aplicação, responsável por:

Authentication: Cuidar de todos os logins e senhas (clientes e admin).

Firestore: O banco de dados para salvar informações de usuários, seus endereços e o histórico de pedidos.

O Passo a Passo da Implementação
Dividiremos o projeto em 4 fases principais para manter a organização.

Fase 1: Configuração da Base
Finalizar a Configuração do Decap CMS: Garantir que o dono da pizzaria já consiga editar o cardápio. Isso nos dá uma vitória rápida e já entrega valor ao seu cliente.

Criar o Projeto no Firebase: Acessar o console do Firebase, criar um novo projeto, e ativar os dois serviços que usaremos: Authentication (com o método "E-mail/senha") e Cloud Firestore (o banco de dados).

Integrar o Firebase ao Site: Adicionar as chaves de configuração do Firebase ao código do seu site para que o frontend possa se comunicar com o backend.

Fase 2: Autenticação e Contas de Usuário
Construir as Páginas de Login: Criar os formulários de "Login", "Cadastro" e uma página de "Minha Conta".

Implementar o Fluxo de Autenticação: Usar o Firebase Authentication para programar as funções de:

createUserWithEmailAndPassword (para novos cadastros).

signInWithEmailAndPassword (para login).

signOut (para logout).

Gerenciar o Estado do Usuário: Criar a lógica que muda a interface do site (ex: mostrar "Login" ou "Minha Conta") dependendo se o usuário está logado ou não.

Fase 3: Pedidos e Histórico
Salvar Dados do Usuário: Na página "Minha Conta", criar formulários para o usuário salvar/atualizar seu nome e endereço, gravando esses dados no Firestore.

Implementar a Lógica de Pedidos: Criar a função que, ao finalizar um pedido, salva um novo documento na coleção pedidos do Firestore, contendo os itens, o valor total e o ID do usuário que fez o pedido.

Exibir o Histórico de Pedidos: Na página "Minha Conta", ler a coleção pedidos e mostrar ao usuário uma lista de todas as compras que ele já fez.

Fase 4: Dashboard do Administrador
Criar a Lógica de Acesso do Admin: Implementar uma regra para que apenas um usuário específico (o admin) possa acessar a página do dashboard.

Construir o Dashboard: Criar uma nova página (/dashboard, por exemplo) que lê os dados da coleção pedidos no Firestore para calcular e exibir as métricas (ex: Nº de pedidos hoje, faturamento total, etc.).